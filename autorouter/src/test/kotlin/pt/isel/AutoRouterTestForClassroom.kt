/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package pt.isel

import pt.isel.autorouter.ArHttpRoute
import pt.isel.autorouter.autorouterDynamic
import pt.isel.autorouter.autorouterReflect
import kotlin.test.Test
import kotlin.test.assertContentEquals
import kotlin.test.assertEquals

class AutoRouterTestForClassroom {

    @Test fun get_drivers_via_reflection() {
        get_drivers(
            Formula1().autorouterReflect().toList(),
        )
    }

//    @Test
    fun get_students_via_dynamic() {
        get_drivers(
            Formula1().autorouterDynamic().toList(),
        )
    }

    fun get_drivers(routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/teams/{teamName}" }
        val res = r.handler.handle(
            mapOf("teamName" to "RedBull"),
            emptyMap(),
            emptyMap(),
        )
        assertContentEquals(
            listOf(
                Driver(1, "Max Verstappen", "47RB", 1),
                Driver(2, "Pierre Gasly", "12RB", 2),
                Driver(3, "Alexander Albon", "24RB", 3),
            ),
            res.get() as List<Driver>,
        )
    }

    @Test fun get_drivers_by_driverId_with_reflection() {
        get_drivers_by_name(
            Formula1().autorouterReflect().toList(),
        )
    }

//    @Test
    fun get_students_with_name_containing_word_via_dynamic() {
        get_drivers_by_name(
            Formula1().autorouterDynamic().toList(),
        )
    }

    private fun get_drivers_by_name(routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/teams/{teamName}" }
        val res = r.handler.handle(
            mapOf("teamName" to "Ferrari"),
            mapOf("driver" to "Leclerc"),
            emptyMap(),
        )
        assertContentEquals(
            listOf(Driver(7, "Charles Leclerc", "15F", 1)),
            res.get() as List<Driver>,
        )
    }

    @Test fun delete_driver_with_driverId_via_reflection() {
        val controller = Formula1()
        delete_driver_using_userId(
            controller,
            controller.autorouterReflect().toList(),
        )
    }

    private fun delete_driver_using_userId(controller: Formula1, routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/teams/{teamName}/drivers/{driverId}" }
        val noDrivers = controller.repo["Ferrari"]?.size
        requireNotNull(noDrivers) { "No drivers in Ferrari team!" }
        val res = r.handler.handle(
            mapOf("teamName" to "Ferrari", "driverId" to "8"),
            emptyMap(),
            emptyMap(),
        )
        assertEquals(
            Driver(8, "Sebastian Vettel", "55F", 2),
            res.get() as Driver,
        )
        assertEquals(
            noDrivers - 1,
            controller.repo["Ferrari"]?.size,
        )
    }
}
