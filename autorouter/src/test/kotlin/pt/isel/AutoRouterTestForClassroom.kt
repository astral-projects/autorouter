/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package pt.isel

import pt.isel.autorouter.ArHttpRoute
import pt.isel.autorouter.ArVerb
import pt.isel.autorouter.autorouterDynamic
import pt.isel.autorouter.autorouterReflect
import pt.isel.classroom.ClassroomController
import kotlin.test.Test
import kotlin.test.assertContentEquals
import kotlin.test.assertEquals

class AutoRouterTestForClassroom {

    @Test
    fun get_students_via_reflection() {
        get_students(
            ClassroomController().autorouterReflect().toList(),
        )
    }

    @Test
    fun get_students_via_dynamic() {
        get_students(
            ClassroomController().autorouterDynamic().toList(),
        )
    }

    fun get_students(routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/classroom/{classroom}" }
        val res = r.handler.handle(
            mapOf("classroom" to "i42d"),
            emptyMap(),
            emptyMap(),
        )
        assertContentEquals(
            listOf(
                Student(9876, "Ole Super", 7, 5),
                Student(4536, "Isel Maior", 7, 5),
                Student(5689, "Ever Sad", 7, 3),
            ),
            res.get() as List<Student>,
        )
    }

    @Test
    fun get_students_with_name_containing_word_via_reflection() {
        get_students_with_name_containing_word(
            ClassroomController().autorouterReflect().toList(),
        )
    }

    @Test
    fun get_students_with_name_containing_word_via_dynamic() {
        get_students_with_name_containing_word(
            ClassroomController().autorouterDynamic().toList(),
        )
    }

    private fun get_students_with_name_containing_word(routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/classroom/{classroom}" }
        val res = r.handler.handle(
            mapOf("classroom" to "i42d"),
            mapOf("student" to "maior"),
            emptyMap(),
        )
        assertContentEquals(
            listOf(Student(4536, "Isel Maior", 7, 5)),
            res.get() as List<Student>,
        )
    }

    @Test
    fun delete_students_with_name_and_number_via_reflection() {
        val controller = ClassroomController()
        delete_students_with_name_and_number(
            controller,
            controller.autorouterReflect().toList(),
        )
    }

    private fun delete_students_with_name_and_number(controller: ClassroomController, routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/classroom/{classroom}/students/{nr}" && it.method == ArVerb.DELETE}
        val nStudents = controller.repo["i42d"]?.size
        requireNotNull(nStudents)
        val res = r.handler.handle(
            mapOf("classroom" to "i42d", "nr" to "4536"),
            emptyMap(),
            emptyMap()
        )
        assertEquals(
            Student(4536, "Isel Maior", 7, 5),
            res.get() as Student
        )
        assertEquals(nStudents - 1, controller.repo["i42d"]?.size)
    }

    @Test
    fun add_students_with_name_and_number_via_reflection() {
        val controller = ClassroomController()
        add_students_with_name_and_number(
            controller,
            controller.autorouterReflect().toList(),
        )
    }

    private fun add_students_with_name_and_number(controller: ClassroomController, toList: List<ArHttpRoute>) {
        val r = toList.first { it.path == "/classroom/{classroom}/students/{nr}" && it.method == ArVerb.PUT}
        val nStudents = controller.repo["i42d"]?.size
        requireNotNull(nStudents)
        val res = r.handler.handle(
            mapOf("classroom" to "i42d", "nr" to "2023"),
            emptyMap(),
            mapOf("name" to "studentName", "nr" to "2023", "group" to "20", "semester" to "1"),
        )
        assertEquals(
            Student(2023, "studentName", 20, 1),
            res.get() as Student,
        )
        assertEquals(nStudents + 1, controller.repo["i42d"]?.size)
    }
}